#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""kafka_producer.py

The Kafka Producers simulates credit card transactions
and sends them to a Kafka topic.
"""

import json
import os
import platform
import socket
import subprocess
from threading import Thread
import time
import random
# For kafka-python, please install:
# pip install git+https://github.com/dpkp/kafka-python.git
# because of error:ModuleNotFoundError: No module named 'kafka.vendor.six.moves'
from kafka import KafkaProducer

script_dir = os.path.dirname(os.path.abspath(__file__))


def check_service_running(host: str, port: int, service_name: str) -> bool:
    """Check if a service is running by attempting to connect to it."""
    try:
        with socket.create_connection((host, port), timeout=5):
            print(f"{service_name} is running on {host}:{port}")
            return True
    except OSError:
        print(f"{service_name} is NOT running on {host}:{port}")
        return False


def generate_transaction() -> dict:
    """Generates a simulated credit card transaction."""
    transaction = {
        'card_number': f'xxxx-xxxx-xxxx-{random.randint(1000, 9999)}',
        'amount': round(random.uniform(5.0, 5000.0), 2),
        'merchant': random.choice(['Amazon', 'Walmart', 'BestBuy', 'Target', 'Starbucks']),
        'timestamp': time.time(),
        'location': random.choice(['New York', 'California', 'Texas', 'London', 'Paris']),
        'transaction_type': random.choice(['online', 'in-store']),
        'transaction_frequency': random.randint(1, 20)
    }

    return transaction


def send_transaction(producer: KafkaProducer) -> None:
    """Sends a single transaction to the Kafka topic."""
    transaction = generate_transaction()
    print(f'Sending transaction: {transaction}')
    producer.send('credit-card-transactions', value=transaction)

    return None


def start_zookeeper() -> None:
    """Starts the Zookeeper server using a relative path on Windows."""
    # Create relative paths to the Zookeeper script and config
    zookeeper_path = os.path.join(script_dir, 'kafka-3.8.0-src', 'bin', 'windows', 'zookeeper-server-start.bat')
    config_path = os.path.join(script_dir, 'kafka-3.8.0-src', 'config', 'zookeeper.properties')

    if check_service_running('127.0.0.1', 2181, "Zookeeper"):
        return  # Zookeeper is already running
    
    # Ensure paths exist
    if not os.path.exists(zookeeper_path):
        raise FileNotFoundError(f"Zookeeper start script not found at: {zookeeper_path}")
    if not os.path.exists(config_path):
        raise FileNotFoundError(f"Zookeeper config not found at: {config_path}")

    # Use 'cmd' to open a new console window and run the .bat script with config
    subprocess.Popen(f'start cmd /k "{zookeeper_path} {config_path}"', shell=True)
    time.sleep(30)  # Wait for Zookeeper to start


def start_kafka() -> None:
    """Starts the Kafka server using a relative path on Windows."""
    # Create relative paths to the Kafka script and config
    kafka_path = os.path.join(script_dir, 'kafka-3.8.0-src', 'bin', 'windows', 'kafka-server-start.bat')
    config_path = os.path.join(script_dir, 'kafka-3.8.0-src', 'config', 'server.properties')

    if check_service_running('127.0.0.1', 9092, "Kafka"):
        return  # Kafka is already running
    
    # Ensure paths exist
    if not os.path.exists(kafka_path):
        raise FileNotFoundError(f"Kafka start script not found at: {kafka_path}")
    if not os.path.exists(config_path):
        raise FileNotFoundError(f"Kafka config not found at: {config_path}")

    # Use 'cmd' to open a new console window and run the .bat script with config
    subprocess.Popen(f'start cmd /k "{kafka_path} {config_path}"', shell=True)
    time.sleep(30)  # Wait for Kafka to start


def start_producer() -> None:
    """Starts the Kafka producer to send simulated credit card transactions.

    This function creates a KafkaProducer instance and sends 100 simulated
    transactions to the 'credit-card-transactions' Kafka topic. Each transaction
    is generated by the `generate_transaction` function and sent with a delay
    of 1 second between transactions.
    """
    start_zookeeper()
    start_kafka()

    # Ensure Kafka is actually running before starting the producer
    if not check_service_running('127.0.0.1', 9092, "Kafka"):
        print("Kafka broker is not available, exiting.")
        return

    producer = KafkaProducer(
        bootstrap_servers=['127.0.0.1:9092'],
        value_serializer=lambda v: json.dumps(v).encode('utf-8')
    )
    print("Kafka producer created successfully!")

    # Simulate 1000 transactions
    threads = []
    for _ in range(1000):
        thread = Thread(target=send_transaction, args=(producer,))
        threads.append(thread)
        thread.start()
        time.sleep(1)  # Optional: add a slight delay between starting threads
    for thread in threads:
        thread.join()  # Wait for all threads to finish

    producer.flush()
    producer.close()

    print("All transactions sent successfully.")

    return None

if __name__ == "__main__":
    start_producer()
