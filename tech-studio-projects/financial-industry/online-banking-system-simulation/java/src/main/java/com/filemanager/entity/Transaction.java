package com.example.banking.entity;

import javax.persistence.*;
import java.math.BigDecimal;
import java.time.LocalDateTime;

/**
 * Represents a transaction associated with a bank account.
 * This entity is mapped to the 'transactions' table in the database.
 */
@Entity
@Table(name = "transactions")
public class Transaction {

    /** Unique identifier for the transaction. */
    @Id
    /**
     * The @GeneratedValue(strategy = GenerationType.IDENTITY) annotation indicates that 
     * the primary key for the entity will be automatically generated by the database using 
     * an identity column (auto-increment). This allows the database to assign a unique ID 
     * value during insert operations, simplifying key management in the application.
     */
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /** Date and time when the transaction occurred. */
    /**
     * The @Column(nullable = false) annotation specifies that the annotated field cannot 
     * be null in the database, enforcing a constraint that requires a value to be provided 
     * whenever a new entity is created or updated. This ensures data integrity by preventing 
     * records from being saved without this field being populated.
     */
    @Column(nullable = false)
    private LocalDateTime date;

    /** Amount of money involved in the transaction. */
    @Column(nullable = false)
    private BigDecimal amount;

    /** The account associated with this transaction. */
    /**
     * The @Column(nullable = false) annotation specifies that the annotated field cannot 
     * be null in the database, enforcing a constraint that requires a value to be provided 
     * whenever a new entity is created or updated. This ensures data integrity by preventing 
     * records from being saved without this field being populated.
     */
    @ManyToOne
    /**
     * The @JoinColumn(name = "account_id", nullable = false) annotation specifies the 
     * foreign key column that links the current entity to another entity, establishing 
     * the relationship in the database. The 'name' attribute defines the column name 
     * in the database, while 'nullable = false' enforces that this foreign key must have a value.
     */
    @JoinColumn(name = "account_id", nullable = false)
    private Account account;

    /** Type of transaction (e.g., deposit, withdrawal). */
    @Column(nullable = false)
    private String type;

    /** 
     * Gets the unique identifier for the transaction.
     * @return the transaction ID.
     */
    public Long getId() {
        return id;
    }

    /** 
     * Sets the unique identifier for the transaction.
     * @param id the transaction ID.
     */
    public void setId(Long id) {
        this.id = id;
    }

    /** 
     * Gets the date and time of the transaction.
     * @return the transaction date and time.
     */
    public LocalDateTime getDate() {
        return date;
    }

    /** 
     * Sets the date and time of the transaction.
     * @param date the transaction date and time.
     */
    public void setDate(LocalDateTime date) {
        this.date = date;
    }

    /** 
     * Gets the amount involved in the transaction.
     * @return the transaction amount.
     */
    public BigDecimal getAmount() {
        return amount;
    }

    /** 
     * Sets the amount involved in the transaction.
     * @param amount the transaction amount.
     */
    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }

    /** 
     * Gets the account associated with this transaction.
     * @return the associated account.
     */
    public Account getAccount() {
        return account;
    }

    /** 
     * Sets the account associated with this transaction.
     * @param account the associated account.
     */
    public void setAccount(Account account) {
        this.account = account;
    }

    /** 
     * Gets the type of transaction.
     * @return the transaction type.
     */
    public String getType() {
        return type;
    }

    /** 
     * Sets the type of transaction.
     * @param type the transaction type.
     */
    public void setType(String type) {
        this.type = type;
    }

    /** 
     * Returns a string representation of the transaction.
     * @return a string representation of the transaction.
     */
    @Override
    public String toString() {
        return "Transaction{" +
                "id=" + id +
                ", date=" + date +
                ", amount=" + amount +
                ", account=" + account +
                ", type='" + type + '\'' +
                '}';
    }
}
