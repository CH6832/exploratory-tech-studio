/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.24
 * Generated at: 2024-09-20 16:09:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import model.ShoppingCart;

public final class shop_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(5);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(1);
    _jspx_imports_classes.add("model.ShoppingCart");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

    // Sample variables; replace with actual data retrieval logic
    String title = "DIY Store Products"; // Title of the page
    String topHeader = "Welcome to the DIY Store"; // Top header
    String bottomText = "Thank you for visiting our store."; // Bottom text

    // Retrieve or create a shopping cart in the session
    ShoppingCart cart = (ShoppingCart) session.getAttribute("cart");
    if (cart == null) {
        cart = new ShoppingCart();
        session.setAttribute("cart", cart);
    }    		
    		
	// Example Product class
	class Product {
	    int katalog_nr;
	    String name;
	    String pr_beschr;
	    double price;

	    Product(int katalog_nr, String name, String pr_beschr, double price) {
	        this.katalog_nr = katalog_nr;
	        this.name = name;
	        this.pr_beschr = pr_beschr;
	        this.price = price;
	    }
	}
	
    // Simulated product data
    List<Product> all = new ArrayList<>(); // This should be fetched from the database
    int n_products = all.size(); // Total number of products
    int n_start = 0; // Starting index for pagination
    int n_end = Math.min(n_products - 1, n_start + 10); // End index for pagination
    int n_per_page = 10; // Number of products per page

    // Sample data for demonstration
    Map<Integer, Double> productPrices = new HashMap<>();
    all.add(new Product(1, "Hammer", "High-quality hammer", 19.99));
    all.add(new Product(2, "Screwdriver", "Versatile screwdriver", 9.99));
    all.add(new Product(3, "Wrench", "Adjustable wrench for various sizes", 14.99));
    all.add(new Product(4, "Drill", "Powerful cordless drill", 79.99));
    all.add(new Product(5, "Pliers", "Multi-purpose pliers", 12.99));
    all.add(new Product(6, "Tape Measure", "25-foot tape measure", 7.99));
    all.add(new Product(7, "Level", "Laser level for precision", 39.99));
    all.add(new Product(8, "Utility Knife", "Retractable utility knife", 4.99));
    all.add(new Product(9, "Saw", "Hand saw for woodworking", 18.99));
    all.add(new Product(10, "Chisel Set", "5-piece chisel set", 24.99));
    all.add(new Product(11, "Safety Glasses", "Protective eyewear", 9.99));
    all.add(new Product(12, "Work Gloves", "Durable work gloves", 11.99));
    all.add(new Product(13, "Nail Gun", "Electric nail gun for quick fastening", 99.99));
    all.add(new Product(14, "Wood Glue", "Strong adhesive for wood projects", 5.99));
    all.add(new Product(15, "Drill Bit Set", "Assorted drill bits for various materials", 29.99));
    all.add(new Product(16, "Sandpaper", "Pack of assorted grit sandpaper", 6.99));
    all.add(new Product(17, "Paint Brushes", "Set of professional paint brushes", 15.99));
    all.add(new Product(18, "Paint Roller", "Heavy-duty paint roller", 10.99));
    all.add(new Product(19, "Ladder", "6-foot step ladder", 89.99));
    all.add(new Product(20, "Extension Cord", "50-foot heavy-duty extension cord", 24.99));
    all.add(new Product(21, "Sanding Block", "Ergonomic sanding block", 3.99));
    all.add(new Product(22, "Drill Press", "Bench drill press for precision drilling", 149.99));
    all.add(new Product(23, "Router", "Wood router for shaping edges", 119.99));
    all.add(new Product(24, "Table Saw", "10-inch table saw for woodworking", 299.99));
    all.add(new Product(25, "Circular Saw", "Cordless circular saw", 129.99));
    all.add(new Product(26, "Jigsaw", "Variable speed jigsaw for cutting curves", 79.99));
    all.add(new Product(27, "Angle Grinder", "Cordless angle grinder", 89.99));
    all.add(new Product(28, "Soldering Iron", "Electric soldering iron for electronics", 19.99));
    all.add(new Product(29, "Digital Multimeter", "Multi-functional digital multimeter", 29.99));
    all.add(new Product(30, "Tool Box", "Heavy-duty tool box for storage", 39.99));
    all.add(new Product(31, "Pocket Knife", "Multi-tool pocket knife", 12.99));
    all.add(new Product(32, "Tile Cutter", "Manual tile cutter for home projects", 59.99));
    all.add(new Product(33, "Pressure Washer", "Electric pressure washer for cleaning", 199.99));
    all.add(new Product(34, "Lawn Mower", "Self-propelled lawn mower", 399.99));
    all.add(new Product(35, "Chainsaw", "Cordless chainsaw for cutting trees", 179.99));
    all.add(new Product(36, "Workbench", "Heavy-duty workbench for projects", 149.99));
    all.add(new Product(37, "Safety Helmet", "Protective helmet for construction", 29.99));
    all.add(new Product(38, "First Aid Kit", "Comprehensive first aid kit", 24.99));
    all.add(new Product(39, "Flashlight", "Rechargeable LED flashlight", 15.99));
    all.add(new Product(40, "Tool Belt", "Durable tool belt for easy access", 19.99));
    all.add(new Product(41, "Garden Trowel", "Hand trowel for gardening", 6.99));
    all.add(new Product(42, "Pruning Shears", "Sharp pruning shears for trimming", 12.99));
    all.add(new Product(43, "Hedge Trimmer", "Cordless hedge trimmer", 129.99));
    all.add(new Product(44, "Sledgehammer", "Heavy-duty sledgehammer", 34.99));
    all.add(new Product(45, "Pickaxe", "Steel pickaxe for digging", 29.99));
    all.add(new Product(46, "Shovel", "Durable garden shovel", 18.99));
    all.add(new Product(47, "Rake", "Metal rake for yard work", 14.99));
    all.add(new Product(48, "Garden Hose", "50-foot expandable garden hose", 24.99));
    all.add(new Product(49, "Sprinkler", "Adjustable garden sprinkler", 9.99));
    all.add(new Product(50, "Wheelbarrow", "Heavy-duty wheelbarrow for hauling", 99.99));
    // Add more products as needed...
    
    for (Product product : all) {
        productPrices.put(product.katalog_nr, product.price);
    }

    // Handle form submission for adding items to cart
    if ("POST".equalsIgnoreCase(request.getMethod())) {
        for (Product product : all) {
            String itemKey = "item" + product.katalog_nr;
            String itemValue = request.getParameter(itemKey);
            if (itemValue != null && !itemValue.isEmpty()) {
                int quantity = Integer.parseInt(itemValue);
                if (quantity > 0) {
                    cart.addItem(product.katalog_nr, quantity);
                }
            }
        }
    }    
    
    // Handle view cart action
    String action = request.getParameter("action");
    if ("View Cart".equals(action)) {
        response.sendRedirect("cart.jsp");
        return; // Prevent further processing
    }

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>");
      out.print( title );
      out.write("</title>\r\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print( request.getContextPath() );
      out.write("/css/shop.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    \r\n");
      out.write("    <div id=\"header\">\r\n");
      out.write("        <h1>DIY Store Products</h1>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"intro\">\r\n");
      out.write("        <p>Your one-stop shop for all things DIY!</p>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"table-container\">\r\n");
      out.write("        <form action=\"");
      out.print( request.getContextPath() );
      out.write("/shop.jsp\" method=\"POST\">\r\n");
      out.write("            <p style=\"text-align:right\">\r\n");
      out.write("                <input id=\"shoppingcart\" type=\"submit\" name=\"action\" value=\"View Cart\">\r\n");
      out.write("            </p>\r\n");
      out.write("        </form>\r\n");
      out.write("        \r\n");
      out.write("        <h1 align=\"center\">Available Products</h1>\r\n");
      out.write("        <p align=\"right\">");
      out.print( all.size() );
      out.write(" Product(s) found</p>\r\n");
      out.write("        \r\n");
      out.write("        <table>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th>Catalog No</th>\r\n");
      out.write("                <th>Name</th>\r\n");
      out.write("                <th>Description</th>\r\n");
      out.write("                <th>Price</th>\r\n");
      out.write("                <th>Quantity</th>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <form action=\"");
      out.print( request.getContextPath() );
      out.write("/shop.jsp\" method=\"POST\">\r\n");
      out.write("                ");

                    for (Product product : all) {
                
      out.write("\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <td align=\"center\">");
      out.print( product.katalog_nr );
      out.write("</td>\r\n");
      out.write("                            <td align=\"center\">");
      out.print( product.name );
      out.write("</td>\r\n");
      out.write("                            <td align=\"center\">");
      out.print( product.pr_beschr );
      out.write("</td>\r\n");
      out.write("                            <td align=\"right\">");
      out.print( product.price );
      out.write(" Euro</td>\r\n");
      out.write("                            <td align=\"center\"><input type=\"text\" name=\"item");
      out.print( product.katalog_nr );
      out.write("\" value=\"0\" size=\"4\"></td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("                ");

                    }
                
      out.write("\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <td colspan=\"2\">\r\n");
      out.write("                    	<input type=\"submit\" value=\"Other Category\">\r\n");
      out.write("                    </td>\r\n");
      out.write("                    <td colspan=\"2\">\r\n");
      out.write("                    	<input type=\"submit\" name=\"action\" value=\"Add to Cart\">\r\n");
      out.write("                    </td>\r\n");
      out.write("                    <td colspan=\"2\" align=\"right\">\r\n");
      out.write("                        <input type=\"submit\" name=\"action\" value=\"Previous\">\r\n");
      out.write("                        <input type=\"submit\" name=\"action\" value=\"Next\">\r\n");
      out.write("                    </td>\r\n");
      out.write("                </tr>\r\n");
      out.write("            </form>\r\n");
      out.write("        </table>\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
