/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.24
 * Generated at: 2024-09-20 16:57:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.*;
import model.ShoppingCart;
import controller.RemoveFromCart;
import controller.UpdateCart;

public final class cart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("model.ShoppingCart");
    _jspx_imports_classes.add("controller.RemoveFromCart");
    _jspx_imports_classes.add("controller.UpdateCart");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

    ShoppingCart cart = (ShoppingCart) session.getAttribute("cart");
    Map<Integer, Double> productPrices = new HashMap<>(); // Store product prices
    productPrices.put(1, 19.99); // Replace with actual prices
    productPrices.put(2, 9.99);
    // Add all products here (as in previous response)

    double totalPrice = cart != null ? cart.getTotalPrice(productPrices) : 0.0; // Handle null cart

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Your Cart</title>\r\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print( request.getContextPath() );
      out.write("/css/shop.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div id=\"header\">\r\n");
      out.write("        <h1>Your Shopping Cart</h1>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"table-container\">\r\n");
      out.write("        <table>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th>Catalog No</th>\r\n");
      out.write("                <th>Name</th>\r\n");
      out.write("                <th>Quantity</th>\r\n");
      out.write("                <th>Price</th>\r\n");
      out.write("                <th>Action</th>\r\n");
      out.write("            </tr>\r\n");
      out.write("            ");

                if (cart != null && !cart.getItems().isEmpty()) {
                    for (Map.Entry<Integer, Integer> entry : cart.getItems().entrySet()) {
                        int productId = entry.getKey();
                        int quantity = entry.getValue();
                        Double price = productPrices.get(productId); // Use Double to allow null

                        // Check if price is available
                        if (price == null) {
                            out.println("<tr><td colspan='5'>Price not available for product ID: " + productId + "</td></tr>");
                            continue; // Skip to the next iteration
                        }
            
      out.write("\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <td>");
      out.print( productId );
      out.write("</td>\r\n");
      out.write("                            <td><!-- Fetch product name from database or use a predefined list --></td>\r\n");
      out.write("                            <td>\r\n");
      out.write("                                <form method=\"post\" action=\"");
      out.print( request.getContextPath() );
      out.write("/updateCart\">\r\n");
      out.write("                                    <input type=\"hidden\" name=\"productId\" value=\"");
      out.print( productId );
      out.write("\">\r\n");
      out.write("                                    <input type=\"hidden\" name=\"quantity\" value=\"");
      out.print( quantity );
      out.write("\">\r\n");
      out.write("                                    <button type=\"submit\" name=\"action\" value=\"decrease\">-</button>\r\n");
      out.write("                                    <input type=\"text\" name=\"currentQuantity\" value=\"");
      out.print( quantity );
      out.write("\" size=\"2\" readonly>\r\n");
      out.write("                                    <button type=\"submit\" name=\"action\" value=\"increase\">+</button>\r\n");
      out.write("                                </form>\r\n");
      out.write("                            </td>\r\n");
      out.write("                            <td>");
      out.print( price * quantity );
      out.write(" Euro</td>\r\n");
      out.write("                            <td>\r\n");
      out.write("                                <form method=\"post\" action=\"");
      out.print( request.getContextPath() );
      out.write("/removeFromCart\">\r\n");
      out.write("                                    <input type=\"hidden\" name=\"productId\" value=\"");
      out.print( productId );
      out.write("\">\r\n");
      out.write("                                    <input type=\"submit\" value=\"Delete\">\r\n");
      out.write("                                </form>\r\n");
      out.write("                            </td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("            ");

                    }
                } else {
            
      out.write("\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <td colspan=\"5\">Your cart is empty.</td>\r\n");
      out.write("                    </tr>\r\n");
      out.write("            ");

                }
            
      out.write("\r\n");
      out.write("        </table>\r\n");
      out.write("        <h3>Total: ");
      out.print( totalPrice );
      out.write(" Euro</h3>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("    <div id=\"header2\">\r\n");
      out.write("        <h1>Payment</h1>\r\n");
      out.write("    </div>\r\n");
      out.write("	<div class=\"payment-container\">\r\n");
      out.write("	    <form method=\"post\" action=\"");
      out.print( request.getContextPath() );
      out.write("/processPayment\">\r\n");
      out.write("	        <label for=\"name\">Name:</label><br>\r\n");
      out.write("	        <input type=\"text\" name=\"name\" required><br>\r\n");
      out.write("	        \r\n");
      out.write("	        <label for=\"cardNumber\">Credit Card Number:</label><br>\r\n");
      out.write("	        <input type=\"text\" name=\"cardNumber\" required><br>\r\n");
      out.write("	\r\n");
      out.write("	        <label for=\"expiryDate\">Expiration Date (MM/YY):</label><br>\r\n");
      out.write("	        <input type=\"text\" name=\"expiryDate\" required><br>\r\n");
      out.write("	\r\n");
      out.write("	        <label for=\"cvv\">CVV:</label><br>\r\n");
      out.write("	        <input type=\"text\" name=\"cvv\" required><br>\r\n");
      out.write("	\r\n");
      out.write("	        <input type=\"submit\" value=\"Pay Now\">\r\n");
      out.write("	    </form>\r\n");
      out.write("	</div>    \r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
